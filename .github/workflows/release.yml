name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Restore Rust cache
        uses: actions/cache@v4
        id: rust-cache
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: cargo-${{ runner.os }}-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            cargo-${{ runner.os }}-

      - name: Setup Rust (MSVC)
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          components: rust-src
          cache: 'true'
          rustflags: '-Awarnings'
          cache-directories:
            ~/.cargo/registry
            ~/.cargo/git
            target

      - name: Build Windows Release
        run: cargo build --release

      - name: Create Release Archive
        run: |
          mkdir release-windows
          copy target\release\*.exe release-windows\
          Compress-Archive -Path release-windows\* -DestinationPath release-windows.zip

      - name: Upload Windows Build
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: release-windows.zip
          retention-days: 1

  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Restore Rust cache
        uses: actions/cache@v4
        id: rust-cache
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: cargo-${{ runner.os }}-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            cargo-${{ runner.os }}-

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          components: rust-src
          cache: 'true'
          rustflags: '-Awarnings'
          cache-directories:
            ~/.cargo/registry
            ~/.cargo/git
            target

      - name: Build Linux Release
        run: cargo build --release

      - name: Create Release Archive
        run: |
          mkdir release-linux
          cp target/release/$(grep -E '^name = ' Cargo.toml | head -n 1 | cut -d '"' -f2) release-linux/
          tar -czvf release-linux.tar.gz release-linux/

      - name: Upload Linux Build
        uses: actions/upload-artifact@v4
        with:
          name: linux-build
          path: release-linux.tar.gz
          retention-days: 1

  create-release:
    needs: [build-windows, build-linux]
    runs-on: ubuntu-latest
    steps:
      - name: Download Windows Build
        uses: actions/download-artifact@v4
        with:
          name: windows-build
          path: ./artifacts

      - name: Download Linux Build
        uses: actions/download-artifact@v4
        with:
          name: linux-build
          path: ./artifacts

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ./artifacts/release-windows.zip
            ./artifacts/release-linux.tar.gz
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}